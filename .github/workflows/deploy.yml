# yaml-language-server: $schema=./deploy.yml 
# Above is for ignoring schema guessing from VS extension (bug)

name: deploy

on:
  workflow_call:
    inputs:
      environmentType:
        required: true
        type: string
      resourceGroupName:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  validate:
     runs-on: ubuntu-latest
     steps: 
     - uses: actions/checkout@v2
     - uses: azure/login@v1
       name: Sign in to Azure
       with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}
     - if: inputs.environmentType != 'prod'
       uses: azure/arm-deploy@v1
       name: Run preflight validation
       with:
         deploymentName: ${{ github.run_number }}
         resourceGroupName: ${{ inputs.resourceGroupName }}
         template: ./deploy/main.bicep
         parameters: >
           environmentType=${{ inputs.environmentType }}
         deploymentMode: Validate
     - if: inputs.environmentType == 'prod'
       uses: azure/arm-deploy@v1
       name: Run what-if
       with:
         failOnStdErr: false
         resourceGroupName: ${{ inputs.resourceGroupName }}
         template: ./deploy/main.bicep
         parameters: >
           environmentType=${{ inputs.environmentType }}
         additionalArguments: --what-if
 
  deploy:
    needs: validate
    environment: ${{ inputs.environmentType }} # Here it is using environment from github action for review(names are same for environments in main.bicep and github environments)
    runs-on: ubuntu-latest
    outputs:
      appServiceAppName: ${{ steps.deploy.outputs.appServiceAppName }}
      appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}
    steps:
    - uses: actions/checkout@v2
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: azure/arm-deploy@v1
      id: deploy
      name: Deploy Bicep file
      with:
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ inputs.resourceGroupName }}
        template: ./deploy/main.bicep
        parameters: >
           environmentType=${{ inputs.environmentType }}
  
  deploy-website:
    needs: deploy
    environment: ${{ inputs.environmentType }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: python-app
          path: .
      
      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
#      - name: Disable static collection and set migration command on App Service
#        uses: Azure/appservice-settings@v1
#        with:  
#          app-name: ${{ env.WEBAPP_NAME }}
#          app-settings-json: '[{ "name": "DISABLE_COLLECTSTATIC", "value": "true" }, { "name": "POST_BUILD_COMMAND",  "value": "python manage.py makemigrations && python manage.py migrate" }, { "name": "SCM_DO_BUILD_DURING_DEPLOYMENT", "value": "true" }, { "name": "DJANGO_ENV", "value": "production"}]'

      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy.outputs.appServiceAppName }}
<<<<<<< HEAD
          package: python-app
=======
          package: pyhton-app
>>>>>>> b3477a1de8f08176c1fe9252ee0a0000efa19232

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps: 
    - uses: actions/checkout@v2
    - run: |
        echo "Skipping Smoke Test"
#        $container = New-PesterContainer `
#          -Path 'deploy/Website.Tests.ps1' `
#          -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
#        Invoke-Pester `
#          -Container $container `
#          -CI 
      name: Run smoke tests
      shell: pwsh
